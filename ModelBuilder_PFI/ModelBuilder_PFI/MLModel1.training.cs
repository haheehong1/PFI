﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace ModelBuilder_PFI
{
    public partial class MLModel1
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"WindowNumber", @"WindowNumber"),new InputOutputColumnPair(@"WindowAreaSum", @"WindowAreaSum"),new InputOutputColumnPair(@"Z1PtsCountRatio", @"Z1PtsCountRatio"),new InputOutputColumnPair(@"Z2PtCountRatio", @"Z2PtCountRatio"),new InputOutputColumnPair(@"Z3PtsCountRatio", @"Z3PtsCountRatio"),new InputOutputColumnPair(@"Z4PtsCountRatio", @"Z4PtsCountRatio"),new InputOutputColumnPair(@"BuildingPtsCountRatio", @"BuildingPtsCountRatio"),new InputOutputColumnPair(@"EquipmentPtsCountRatio", @"EquipmentPtsCountRatio"),new InputOutputColumnPair(@"TreePtsCountRatio", @"TreePtsCountRatio"),new InputOutputColumnPair(@"PavementPtsCountRatio", @"PavementPtsCountRatio"),new InputOutputColumnPair(@"GrassPtsCountRatio", @"GrassPtsCountRatio"),new InputOutputColumnPair(@"WaterPtsCountRatio", @"WaterPtsCountRatio"),new InputOutputColumnPair(@"DynamicPtsRatio", @"DynamicPtsRatio"),new InputOutputColumnPair(@"SkyPtsCountRatio", @"SkyPtsCountRatio"),new InputOutputColumnPair(@"ElementNumber", @"ElementNumber"),new InputOutputColumnPair(@"FloorHeights", @"FloorHeights"),new InputOutputColumnPair(@"BuildingClosestDist", @"BuildingClosestDist"),new InputOutputColumnPair(@"EquipmentClosestDist", @"EquipmentClosestDist"),new InputOutputColumnPair(@"TreeClosestDist", @"TreeClosestDist"),new InputOutputColumnPair(@"GrassClosestDist", @"GrassClosestDist"),new InputOutputColumnPair(@"WaterClosestDist", @"WaterClosestDist"),new InputOutputColumnPair(@"DynamicClosestDist", @"DynamicClosestDist"),new InputOutputColumnPair(@"SkyCondition", @"SkyCondition")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"WindowNumber",@"WindowAreaSum",@"Z1PtsCountRatio",@"Z2PtCountRatio",@"Z3PtsCountRatio",@"Z4PtsCountRatio",@"BuildingPtsCountRatio",@"EquipmentPtsCountRatio",@"TreePtsCountRatio",@"PavementPtsCountRatio",@"GrassPtsCountRatio",@"WaterPtsCountRatio",@"DynamicPtsRatio",@"SkyPtsCountRatio",@"ElementNumber",@"FloorHeights",@"BuildingClosestDist",@"EquipmentClosestDist",@"TreeClosestDist",@"GrassClosestDist",@"WaterClosestDist",@"DynamicClosestDist",@"SkyCondition"}))      
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=4,FeatureFraction=0.815220129448517F,LabelColumnName=@"OverallRating",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
